Documentación de la API para consumo  BACKEND

El código lo pense de tal forma que en cada procesamiento de soluciones se guardara en la base, si la 
consulta ya fue procesada está no volvera a procesar la solución si no que arrojara directamente la solución ya guardada, agilizando los resultados mostrados.
app/: Contiene la lógica principal de la aplicación.
	api/: Define las rutas y endpoints de la API.
	models/: Contiene los modelos de datos.
	schemas/: Define los esquemas para la validación de datos, en este caso no se usan.
	endpoints/: Contiene la lógica de negocio y servicios.
	database/: Configuración y modelos de la base de datos.
test/: Contiene las pruebas unitarias y de integración.
requirements.txt: Lista de dependencias del proyecto.
Dockerfile: Es un archivo de texto que contiene una serie de instrucciones que Docker utiliza para construir una imagen
docker-compose-###.yml: Se utiliza para definir y gestionar aplicaciones que utilizan múltiples contenedores Docker.
.travis.yml: Servicio alojado de integración continua (CI) utilizado para desarrollar y probar (test) proyectos de software alojados en GitHub.
Makefile: Reglas para ejecutar docker compose

.gitignore: Archivos y directorios que deben ser ignorados por Git.

README.md: Documentación del proyecto.


CONSTRUCCIÓN DEL PROYECTO con Docker

Para realizar la construcción del proyecto se deberá instalar make para ejecutar la instruccion dentro del archivo Makefile

linux
instalar make : npm intall make

posteriormente ejecutamos el comando 

make <"etiqueta dentro del archivo Makefile"> --> por ejemplo ejecutamos la instrucción 

make sit  --> y se ejecutará la instrucción con esta etiqueta dentro del archivo Makefile 



Documentación de la API para consumo 
SWAGGER en el siguiente link
** http://127.0.0.1:8000/docs ***

# NReinas

Archivo .env necesario para realizar la conexion con la base de datos

EXAMPLE
DATABASE_URL="postgresql://root:Cbg9Xay9xtN@localhost:5433/nreinas"

se puede colocar la conexion directamente en el archivo database.py en la linea 38

engine = create_engine(os.getenv("DATABASE_URL")) y/o
engine = create_engine("postgresql://root:Cbg9Xay9xtN@127.0.0.1:5433/nreinas")



## Branches description

* `sit` System integration Testing: This branch is used for system integration testing, which involves testing the interactions between different components or systems. This branch is typically used to test the functionality and compatibility of new changes before they are deployed to the production environment.

* `uat` System Acceptance Testing: This branch is used for system acceptance testing, which involves testing the system from the perspective of the end-users. This branch is typically used to test the functionality and usability of new changes before they are deployed to the production environment.

* `prod` Production: This is the main branch used for production releases. It contains the most stable and tested version of the code, and is typically used to deploy new features and changes to the live production environment. It is important that any changes that are merged into this branch have undergone rigorous testing and review before being deployed to production.

### LOCAL SETUP
```
git config --global --add url."git@github.com:".insteadOf "https://github.com/"
```

### Deploy

Cambiar version en los [workflows] de github que se encuentran en la carpeta [.github] y en los archivos .yml que se encuentran
en la raiz del proyecto debe de ser del mismo ambiente 

Ejemplo:
para uat cambiar

VERSION: "v0.4.15" en [uat.yml]

image: albertorodmans/nreinas:v0.4.15-uat en [docker-compose.uat.yml]

nota:  se aumenta la version siguiendo el standard de https://semver.org/

Se realiza el push con los cambios a realizar y los cambios antes mencionados anteriormente.


#### Variables de entorno 

Si se requiere modificar alguna variable de entorno se tendrá que hacer desde 
https://github.com/Albertorodmans/nreinas/settings/environments dependiendo del ambiente de que se quiera modificar


### logs

para los  ambientes se debera entrar al servidor y ejecutar 

```
docker logs -f --since 2023-05-31 nreinas
```
### Directorio

#### .github 
se encuentran todos los archivos .yml para los github actions dividido por ambiente

#### app.py

Aqui se encuentran todos los endpoints que en este caso es el de resolver

http://127.0.0.1:8000/resolver/numreinas
method: POST
body: {
    "n": número de reinas (ejemplo : 8), #variable de tipo INT
}


Colección de postman


{
	"info": {
		"_postman_id": "dd912617-a4bd-44ee-bb0a-a6fe51609d2b",
		"name": "nreinas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9112085"
	},
	"item": [
		{
			"name": "nreinas",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"n\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/resolver/numreinas",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"solve"
					]
				}
			},
			"response": []
		}
	]
}


TEST backend 

** Para correr las pruebas programadas es necesario instalar pytest con el siguiente comando

pip3 install pytest

posteriortemente nos situamos en la raix de la carpeta de NReinasBack y corremos el comando 

pytest

este nos arrojara las validacions que hemos programado en este caso solo probe hasta 14 reinas ya que cada salto proboca más tiempo de procesamiento.


Documentación FrontEnd

Para correr el proyecto debemos instalar vue con el siguiente comando

npm install vue

posteriormente corremos 

npm install all

y al concluir con la instalación corremos lo siguiente 

npm run serve

Una simple vista para colocar dentro de un input el numero de reinas que querramos reoslver y este planchara los resultados en pantalla



